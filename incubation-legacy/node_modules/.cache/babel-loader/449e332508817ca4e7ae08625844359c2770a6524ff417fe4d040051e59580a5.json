{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useCart = (initialItems = []) => {\n  _s();\n  const [items, setItems] = useState(initialItems);\n  const [cart, setCart] = useState([]);\n  const updateItemStockInDatabase = item => {\n    // API call to update item stock in the database\n    fetch(`/api/products/${item.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    }).then(response => response.json()).then(data => {\n      // Handle response if needed\n    }).catch(error => console.error('Failed to update item stock:', error));\n  };\n  const addToCartDatabase = cartItem => {\n    // API call to add item to cart in the database\n    // fetch('/api/cart', {\n    fetch('http://localhost:8765/CART-SERVICE/cart/get/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cartItem)\n    }).then(response => response.json()).then(data => {\n      // Handle response if needed\n    }).catch(error => console.error('Failed to add item to cart:', error));\n  };\n  const addToCart = item => {\n    const itemIndex = items.findIndex(i => i.id === item.id);\n    if (itemIndex !== -1 && items[itemIndex].inStock > 0) {\n      // Update stock locally\n      const updatedItems = [...items];\n      updatedItems[itemIndex].inStock -= 1;\n      if (updatedItems[itemIndex].inStock === 0) {\n        updatedItems.splice(itemIndex, 1);\n      }\n      setItems(updatedItems);\n      updateItemStockInDatabase({\n        ...updatedItems[itemIndex],\n        inStock: updatedItems[itemIndex].inStock\n      });\n\n      // Update cart\n      const cartIndex = cart.findIndex(i => i.id === item.id);\n      if (cartIndex !== -1) {\n        const updatedCart = [...cart];\n        updatedCart[cartIndex].quantity += 1;\n        setCart(updatedCart);\n      } else {\n        const newCartItem = {\n          ...item,\n          quantity: 1\n        };\n        setCart([...cart, newCartItem]);\n        addToCartDatabase(newCartItem);\n      }\n    }\n  };\n  return {\n    items,\n    cart,\n    setItems,\n    setCart,\n    addToCart\n  };\n};\n_s(useCart, \"CLFw19DgpUmOYIgWG03hxtVHPpg=\");\nexport default useCart;","map":{"version":3,"names":["useState","useCart","initialItems","_s","items","setItems","cart","setCart","updateItemStockInDatabase","item","fetch","id","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","addToCartDatabase","cartItem","addToCart","itemIndex","findIndex","i","inStock","updatedItems","splice","cartIndex","updatedCart","quantity","newCartItem"],"sources":["C:/Users/User/Desktop/Project 1 Incubation/incubation-legacy/src/CartComponents/UseCart.jsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useCart = (initialItems = []) => {\r\n  const [items, setItems] = useState(initialItems);\r\n  const [cart, setCart] = useState([]);\r\n\r\n  const updateItemStockInDatabase = (item) => {\r\n    // API call to update item stock in the database\r\n    fetch(`/api/products/${item.id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(item),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Handle response if needed\r\n    })\r\n    .catch(error => console.error('Failed to update item stock:', error));\r\n  };\r\n\r\n  const addToCartDatabase = (cartItem) => {\r\n    // API call to add item to cart in the database\r\n    // fetch('/api/cart', {\r\n      fetch('http://localhost:8765/CART-SERVICE/cart/get/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(cartItem),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Handle response if needed\r\n    })\r\n    .catch(error => console.error('Failed to add item to cart:', error));\r\n  };\r\n\r\n  const addToCart = (item) => {\r\n    const itemIndex = items.findIndex(i => i.id === item.id);\r\n    if (itemIndex !== -1 && items[itemIndex].inStock > 0) {\r\n      // Update stock locally\r\n      const updatedItems = [...items];\r\n      updatedItems[itemIndex].inStock -= 1;\r\n      if (updatedItems[itemIndex].inStock === 0) {\r\n        updatedItems.splice(itemIndex, 1);\r\n      }\r\n      setItems(updatedItems);\r\n      updateItemStockInDatabase({ ...updatedItems[itemIndex], inStock: updatedItems[itemIndex].inStock });\r\n\r\n      // Update cart\r\n      const cartIndex = cart.findIndex(i => i.id === item.id);\r\n      if (cartIndex !== -1) {\r\n        const updatedCart = [...cart];\r\n        updatedCart[cartIndex].quantity += 1;\r\n        setCart(updatedCart);\r\n      } else {\r\n        const newCartItem = { ...item, quantity: 1 };\r\n        setCart([...cart, newCartItem]);\r\n        addToCartDatabase(newCartItem);\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    items,\r\n    cart,\r\n    setItems,\r\n    setCart,\r\n    addToCart,\r\n  };\r\n};\r\n\r\nexport default useCart;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAGA,CAACC,YAAY,GAAG,EAAE,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACE,YAAY,CAAC;EAChD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMQ,yBAAyB,GAAIC,IAAI,IAAK;IAC1C;IACAC,KAAK,CAAC,iBAAiBD,IAAI,CAACE,EAAE,EAAE,EAAE;MAChCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CAAC,CACDQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;IAAA,CACD,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EACvE,CAAC;EAED,MAAME,iBAAiB,GAAIC,QAAQ,IAAK;IACtC;IACA;IACEf,KAAK,CAAC,8CAA8C,EAAE;MACtDE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;IAC/B,CAAC,CAAC,CACDR,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;IAAA,CACD,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;EACtE,CAAC;EAED,MAAMI,SAAS,GAAIjB,IAAI,IAAK;IAC1B,MAAMkB,SAAS,GAAGvB,KAAK,CAACwB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;IACxD,IAAIgB,SAAS,KAAK,CAAC,CAAC,IAAIvB,KAAK,CAACuB,SAAS,CAAC,CAACG,OAAO,GAAG,CAAC,EAAE;MACpD;MACA,MAAMC,YAAY,GAAG,CAAC,GAAG3B,KAAK,CAAC;MAC/B2B,YAAY,CAACJ,SAAS,CAAC,CAACG,OAAO,IAAI,CAAC;MACpC,IAAIC,YAAY,CAACJ,SAAS,CAAC,CAACG,OAAO,KAAK,CAAC,EAAE;QACzCC,YAAY,CAACC,MAAM,CAACL,SAAS,EAAE,CAAC,CAAC;MACnC;MACAtB,QAAQ,CAAC0B,YAAY,CAAC;MACtBvB,yBAAyB,CAAC;QAAE,GAAGuB,YAAY,CAACJ,SAAS,CAAC;QAAEG,OAAO,EAAEC,YAAY,CAACJ,SAAS,CAAC,CAACG;MAAQ,CAAC,CAAC;;MAEnG;MACA,MAAMG,SAAS,GAAG3B,IAAI,CAACsB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;MACvD,IAAIsB,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,MAAMC,WAAW,GAAG,CAAC,GAAG5B,IAAI,CAAC;QAC7B4B,WAAW,CAACD,SAAS,CAAC,CAACE,QAAQ,IAAI,CAAC;QACpC5B,OAAO,CAAC2B,WAAW,CAAC;MACtB,CAAC,MAAM;QACL,MAAME,WAAW,GAAG;UAAE,GAAG3B,IAAI;UAAE0B,QAAQ,EAAE;QAAE,CAAC;QAC5C5B,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAE8B,WAAW,CAAC,CAAC;QAC/BZ,iBAAiB,CAACY,WAAW,CAAC;MAChC;IACF;EACF,CAAC;EAED,OAAO;IACLhC,KAAK;IACLE,IAAI;IACJD,QAAQ;IACRE,OAAO;IACPmB;EACF,CAAC;AACH,CAAC;AAACvB,EAAA,CAlEIF,OAAO;AAoEb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}